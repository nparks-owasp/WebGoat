AWSTemplateFormatVersion: "2010-09-09"

Description: >
  AWS Cloud Formation for creating an AWS CodePipeline that checks a git repo for changes and then performs a build using code build


Parameters:
  qsPipelineName:
    Description: The name of the AWS Code Pipeline
    Type: String
    Default: WG-ecr-pipe
    MinLength: 1
  qsPipelineRoleARN:
    Description: The complete ARN to the IAM role that code pipeline should use
    Type: String
    MinLength: 1
  qsCodeRepo:
    Description: The Repository
    Type: String
    MinLength: 1
  qsRepoBranch:
    Description: The Branch in the Repository
    Type: String
    MinLength: 1
  qsGitHubUser:
    Description: The GitHub User Id
    Type: String
    MinLength: 1
  qsGitHubAPIToken:
    Description: The GitHub Personal Access token do not use password
    NoEcho: true
    Type: String
    MinLength: 1
  qsS3PipelineArtifacts:
    Description: Where Code Pipeline will state artifacts in S3
    Type: String
    MinLength: 1
  qsCodeBuildName:
    Description: Name of the AWS Code Build Step
    Type: String
    Default: WG-mvnBuild
    MinLength: 1
  qsDockerBuildName:
    Description: Name of the AWS Code Build
    Type: String
    Default: WG-Docker
    MinLength: 1
  qsKMSKeyARN:
    Description: The KMS ARN that the IAM Role is allowed to use
    Type: String
    MinLength: 1
  qsCodeRoleArn:
    Description: The IAM Role ARN for CodePipeline and CodeDeploy
    Type: String
    MinLength: 1
  qsECRrepositoryName:
    Description: The The name for the ECR repository
    Default: WebGoat8CD
    Type: String
    MinLength: 1



Resources:
# ECR ECS Setup
  stkECRrepo:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Ref 'qsECRrepositoryName'




# Pipeline Items

  stkcbrCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Builds WebGoat Jar using build file in repo
      EncryptionKey: !Ref 'qsKMSKeyARN'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
        Type: LINUX_CONTAINER
      Name: !Ref 'qsCodeBuildName'
      ServiceRole: !Ref 'qsCodeRoleArn'
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE



  stkcbrCodeBuildDocker:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: Builds WebGoat Container image using built jar and docker file
      EncryptionKey: !Ref 'qsKMSKeyARN'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:1.12.1
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECRREPO 
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${stkECRrepo}
      Name: !Ref 'qsDockerBuildName'
      ServiceRole: !Ref 'qsCodeRoleArn'
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login)
              build:
                commands:
                  - docker build --tag "${ECRREPO}:latest" .
              post_build:
                commands:
                  - docker push "${ECRREPO}:latest"
                  - printf '{"tag": "latest","image":"%s","from":"%s"}' $CODEBUILD_RESOLVED_SOURCE_VERSION $ECRREPO > dkrbuild.json
          artifacts:
            files: dkrbuild.json



  stkcplPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'qsPipelineName'
      RoleArn: !Ref 'qsPipelineRoleARN'
      ArtifactStore:
        Location: !Ref 'qsS3PipelineArtifacts'
        Type: S3
      Stages:
        - Name: GetWGCode
          Actions:
            - Name: CodeSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Branch: !Ref 'qsRepoBranch'
                Repo: !Ref 'qsCodeRepo'
                Owner: !Ref 'qsGitHubUser'
                OAuthToken: !Ref 'qsGitHubAPIToken'
              OutputArtifacts:
                - Name: MySource
              RunOrder: '1'
        - Name: MvnBuildWG
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: MySource
              Configuration:
                ProjectName: !Ref stkcbrCodeBuild
              OutputArtifacts:
                - Name: MyBuild
              RunOrder: '1'
        - Name: DockerBuildWG
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: MyBuild
              Configuration:
                ProjectName: !Ref stkcbrCodeBuildDocker
              OutputArtifacts:
                - Name: MyResult
              RunOrder: '1'

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  ImageRepo:
    value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${stkECRrepo}